MODULE {SystemF.Inference}
{}

{
import qualified Data.Map as Map
import Data.Maybe

import SystemF.Types

type Var = String

data Con = 
      Bool Bool
    | Real Double
    deriving (Eq,Ord,Show)
      
}

PRAGMA genlinepragmas

DATA Exp 
    | Var var:Var                       -- Variables
    | Con con:Con                       -- Constants
    | Lam var:Var exp:Exp               -- Lambda-abstraction
    | App exp:Exp arg:Exp               -- Application
    | Fix exp:Exp                       -- Fixed point
    | Let stats:{Map.Map Var Exp} exp:Exp     -- Let-binding
    | If  cond:Exp thn:Exp els:Exp      -- Case-statement
DERIVING Exp: Eq, Show, Ord
     
