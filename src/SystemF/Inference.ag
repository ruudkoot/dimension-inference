MODULE {SystemF.Inference}
{}

{
import qualified Data.Map as Map
import Data.Maybe

type Var = String

data Con = 
      Bool Bool
    | Real Double
    deriving (Eq,Ord,Show)
    
type TyVar = String

data TyCon =
      TyBool
    | TyReal
    deriving (Eq,Ord,Show)
    
type TySubst = Map.Map TyVar Ty

type TyEnv   = Map.Map Var TyScheme
}

PRAGMA genlinepragmas

DATA Exp 
    | Var var:Var                       -- Variables
    | Con con:Con                       -- Constants
    | Lam var:Var exp:Exp               -- Lambda-abstraction
    | App exp:Exp arg:Exp               -- Application
    | Fix exp:Exp                       -- Fixed point
    | Let stats:{Map.Map Var Exp} exp:Exp     -- Let-binding
    | If  cond:Exp thn:Exp els:Exp      -- Case-statement
DERIVING Exp: Eq, Show, Ord
    
DATA Ty 
    | TyVar  var:TyVar          -- Type variables
    | TyCon  con:TyCon          -- Type constants
    | TyApp  arg:Ty res:Ty      -- Function-space constructor
DERIVING Ty: Eq, Show, Ord

DATA TyScheme
    | TyScheme vars:{[TyVar]} ty:Ty
DERIVING TyScheme: Eq, Show, Ord   
